# Это конфигурация для линтера golangci-lint. Я настроил его для проверки всего кода в проекте.

run:
  # Включаем директории, которые нужно проверять. 
  include:
    - ./api-service/...  # Всё из директории api-service — проверка на возможные проблемы
    - ./db-service/...   # И код из db-service тоже будет проверен на ошибки
  
  # Исключаем из проверки ненужные директории. Например, конфигурационные файлы в docker.
  exclude-dirs:
    - ./docker  # Не проверяю docker, так как там обычно только конфигурация, а не код
  
  # Решил не проверять тесты. Только основной код.
  tests: false  # Для меня важно проверять только рабочий код, тесты пропускаю

# Настройки для линтеров, чтобы всё было под контролем
linters-settings:
  # govet проверяет на ошибки, связанные с тенью переменных, которые могут переопределять значения в разных областях видимости.
  govet:
    shadow: true  # Включаю проверку на тени переменных, чтобы не возникало путаницы

  # gocyclo отвечает за сложность функций. Если функция слишком сложная, это плохой признак.
  gocyclo:
    min-complexity: 15  # Если функция слишком сложная (циклическая сложность больше 15), линтер предупредит

  # errcheck проверяет, что я всегда обрабатываю ошибки. Это важно, чтобы не пропускать их.
  errcheck:
    check-type-assertions: true  # Включаю проверку приведения типов, чтобы ошибок не оставалось без внимания

  # depguard помогает мне не подключать нежелательные пакеты. Если что-то из blacklist используется, линтер это покажет.
  depguard:
    list-type: blacklist  # Использую черный список для зависимостей, чтобы не тянуть лишние пакеты

  # revive - это линтер, который позволяет настроить дополнительные проверки. Я не люблю, когда много комментариев, поэтому отключил их.
  revive:
    exported: false  # Отключаю проверку комментариев для экспортируемых элементов, мне это не нужно
    rules:
      - name: package-comments
        disabled: true  # Не хочу проверок на комментарии в начале пакетов
      - name: file-header
        disabled: true  # Не обязательно иметь заголовок в файле
      - name: function-length
        disabled: true  # Длину функций тоже не проверяю, если честно

# Список линтеров, которые я решил включить для проверки
linters:
  enable:
    - govet       # Включаю govet для поиска потенциальных ошибок
    - staticcheck # Статическая проверка для нахождения скрытых проблем
    - unused      # Проверяю на неиспользуемые переменные, функции и импорты (это важно!)
    - errcheck    # Проверяю, что ошибки точно обрабатываются
    - gocyclo     # Проверка на сложность функций, чтобы они не становились запутанными
    - revive      # Дополнительные проверки, настроенные выше

# Тут я задаю, как лимитировать количество найденных проблем
issues:
  max-issues-per-linter: 0  # Максимум ошибок не ограничиваю (пусть показывает все)
  max-same-issues: 0        # Максимум одинаковых ошибок — тоже 0, пусть каждая ошибка будет один раз
  exclude-use-default: false # Не хочу, чтобы дефолтные проблемы игнорировались, пусть они тоже проверяются


